import React, {useState, useEffect} from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  RefreshControl,
  Share,
  Alert,
  Image,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {COLORS, SPACING, BORDER_RADIUS, FONT_SIZES, FONT_WEIGHTS} from '../config/colors';
import {VulnerabilityReport} from '../data-models';
import GradientBorderButton from '../ui-elements/GradientBorderButton';

const VulnerabilityAnalysisScreen: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityReport[]>([]);
  const [savedReports, setSavedReports] = useState<string[]>([]);
  const [refreshing, setRefreshing] = useState(false);

  const defaultVulnerabilities: VulnerabilityReport[] = [
    {
      id: '1',
      title: 'Outdated SSL/TLS Configuration',
      description: 'Your SSL/TLS configuration is using outdated protocols that may be vulnerable to attacks.',
      category: 'Network Security',
      severity: 'high',
      cveId: 'CVE-2023-1234',
      isSaved: false,
      createdAt: new Date(),
      remediation: 'Update to TLS 1.3 and disable older protocols',
      affectedSystems: ['Web Server', 'Email Server'],
    },
    {
      id: '2',
      title: 'Weak Password Policy',
      description: 'Current password policy allows weak passwords that can be easily compromised.',
      category: 'Authentication',
      severity: 'medium',
      cveId: 'CVE-2023-5678',
      isSaved: false,
      createdAt: new Date(),
      remediation: 'Implement strong password requirements with complexity rules',
      affectedSystems: ['User Accounts', 'Admin Panel'],
    },
    {
      id: '3',
      title: 'Unpatched Software Vulnerabilities',
      description: 'Multiple software components have known vulnerabilities that need immediate patching.',
      category: 'System Security',
      severity: 'critical',
      cveId: 'CVE-2023-9012',
      isSaved: false,
      createdAt: new Date(),
      remediation: 'Apply security patches immediately and enable automatic updates',
      affectedSystems: ['Operating System', 'Database Server'],
    },
    {
      id: '4',
      title: 'Insecure API Endpoints',
      description: 'Some API endpoints lack proper authentication and rate limiting.',
      category: 'Application Security',
      severity: 'medium',
      cveId: 'CVE-2023-3456',
      isSaved: false,
      createdAt: new Date(),
      remediation: 'Implement proper authentication and rate limiting for all API endpoints',
      affectedSystems: ['REST API', 'GraphQL API'],
    },
    {
      id: '5',
      title: 'Missing Security Headers',
      description: 'Web application is missing important security headers that protect against common attacks.',
      category: 'Web Security',
      severity: 'low',
      cveId: 'CVE-2023-7890',
      isSaved: false,
      createdAt: new Date(),
      remediation: 'Add security headers like CSP, HSTS, and X-Frame-Options',
      affectedSystems: ['Web Application'],
    },
    {
      id: '6',
      title: 'Insufficient Logging and Monitoring',
      description: 'Security events are not being properly logged and monitored for suspicious activities.',
      category: 'Monitoring',
      severity: 'medium',
      cveId: 'CVE-2023-2468',
      isSaved: false,
      createdAt: new Date(),
      remediation: 'Implement comprehensive logging and real-time monitoring system',
      affectedSystems: ['All Systems'],
    },
  ];

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      // Load saved reports
      const savedReportsData = await AsyncStorage.getItem('savedVulnerabilityReports');
      let savedReportIds: string[] = [];
      if (savedReportsData) {
        savedReportIds = JSON.parse(savedReportsData);
        setSavedReports(savedReportIds);
      }

      // Load vulnerabilities with saved status
      const vulnerabilitiesWithSavedStatus = defaultVulnerabilities.map(vuln => ({
        ...vuln,
        isSaved: savedReportIds.includes(vuln.id),
      }));
      setVulnerabilities(vulnerabilitiesWithSavedStatus);
    } catch (error) {
      console.error('Error loading data:', error);
      setVulnerabilities(defaultVulnerabilities);
    }
  };

  const saveSavedReports = async (newSavedReports: string[]) => {
    try {
      await AsyncStorage.setItem('savedVulnerabilityReports', JSON.stringify(newSavedReports));
      setSavedReports(newSavedReports);
    } catch (error) {
      console.error('Error saving reports:', error);
    }
  };

  const handleSaveReport = async (reportId: string) => {
    const isCurrentlySaved = savedReports.includes(reportId);
    let newSavedReports: string[];

    if (isCurrentlySaved) {
      newSavedReports = savedReports.filter(id => id !== reportId);
    } else {
      newSavedReports = [...savedReports, reportId];
    }

    await saveSavedReports(newSavedReports);

    // Update vulnerabilities state with the new saved reports
    setVulnerabilities(prevVulns =>
      prevVulns.map(vuln =>
        vuln.id === reportId ? {...vuln, isSaved: newSavedReports.includes(reportId)} : vuln
      )
    );
  };

  const handleShareReport = async (report: VulnerabilityReport) => {
    try {
      const shareContent = `Vulnerability Report: ${report.title}\n\nDescription: ${report.description}\n\nSeverity: ${report.severity.toUpperCase()}\nCVE ID: ${report.cveId}\n\nRemediation: ${report.remediation}\n\nShared from CyberGuardian`;
      await Share.share({
        message: shareContent,
        title: report.title,
      });
    } catch (error) {
      console.error('Error sharing report:', error);
      Alert.alert('Error', 'Failed to share vulnerability report');
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await loadData();
    setRefreshing(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return COLORS.error;
      case 'high': return '#FF6B35';
      case 'medium': return COLORS.warning;
      case 'low': return COLORS.info;
      default: return COLORS.textSecondary;
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'check-circle';
      default: return 'info';
    }
  };

  const renderVulnerability = ({item}: {item: VulnerabilityReport}) => {
    const severityColor = getSeverityColor(item.severity);
    const severityIcon = getSeverityIcon(item.severity);

    return (
      <View style={styles.vulnerabilityCard}>
        <View style={styles.vulnerabilityHeader}>
          <View style={styles.vulnerabilityTitleContainer}>
            <Text style={{fontSize: 20, color: severityColor}}>
              {severityIcon === 'error' ? 'üö®' : 
               severityIcon === 'warning' ? '‚ö†Ô∏è' : 
               severityIcon === 'info' ? '‚ÑπÔ∏è' : '‚úÖ'}
            </Text>
            <Text style={styles.vulnerabilityTitle}>{item.title}</Text>
          </View>
          <Text style={[styles.vulnerabilitySeverity, {color: severityColor}]}>
            {item.severity.toUpperCase()}
          </Text>
        </View>
        
        <Text style={styles.vulnerabilityCategory}>{item.category}</Text>
        <Text style={styles.vulnerabilityDescription}>{item.description}</Text>
        
        <View style={styles.vulnerabilityDetails}>
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>CVE ID:</Text>
            <Text style={styles.detailValue}>{item.cveId}</Text>
          </View>
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Affected Systems:</Text>
            <Text style={styles.detailValue}>{item.affectedSystems.join(', ')}</Text>
          </View>
        </View>
        
        <View style={styles.remediationContainer}>
          <Text style={styles.remediationLabel}>Remediation:</Text>
          <Text style={styles.remediationText}>{item.remediation}</Text>
        </View>
        
        <View style={styles.vulnerabilityActions}>
          <GradientBorderButton
            title="Share Report"
            onPress={() => handleShareReport(item)}
            icon={<Image source={require('../media-resources/media-assets/ion_share.png')} style={{width: 20, height: 20}} />}
            style={styles.shareButtonContainer}
          />
          
          <TouchableOpacity
            style={styles.saveButton}
            onPress={() => handleSaveReport(item.id)}>
            <Image 
              source={require('../media-resources/media-assets/bottom/1.png')} 
              style={{
                width: 30, 
                height: 30,
                tintColor: item.isSaved ? COLORS.primary : COLORS.textSecondary
              }} 
            />
          </TouchableOpacity>
        </View>
      </View>
    );
  };

  const renderEmptyState = () => (
    <View style={styles.emptyState}>
      <Image source={require('../media-resources/media-assets/2.png')} style={{width: 180, height: 180}} />
      <Text style={styles.emptyStateTitle}>No Vulnerabilities Found</Text>
      <Text style={styles.emptyStateDescription}>
        Your system appears to be secure. Run regular vulnerability scans to maintain security.
      </Text>
      <GradientBorderButton
        title="Run Vulnerability Scan"
        onPress={() => {
          Alert.alert('Vulnerability Scan', 'Scan completed. No new vulnerabilities detected.');
        }}
      />
    </View>
  );

  const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical');
  const highVulns = vulnerabilities.filter(v => v.severity === 'high');

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Vulnerability Analysis:</Text>
        {vulnerabilities.length > 0 && (
          <View style={styles.summaryContainer}>
            <View style={styles.summaryItem}>
              <Text style={[styles.summaryNumber, {color: COLORS.error}]}>{criticalVulns.length}</Text>
              <Text style={styles.summaryLabel}>Critical</Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={[styles.summaryNumber, {color: '#FF6B35'}]}>{highVulns.length}</Text>
              <Text style={styles.summaryLabel}>High</Text>
            </View>
          </View>
        )}
      </View>
      
      <FlatList
        data={vulnerabilities}
        renderItem={renderVulnerability}
        keyExtractor={(item) => item.id}
        contentContainerStyle={vulnerabilities.length === 0 ? styles.emptyContainer : styles.listContainer}
        ListEmptyComponent={renderEmptyState}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        showsVerticalScrollIndicator={false}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  header: {
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  headerTitle: {
    fontSize: FONT_SIZES.xl,
    fontWeight: 'bold' as const,
    color: COLORS.text,
    marginBottom: SPACING.sm,
  },
  summaryContainer: {
    flexDirection: 'row',
    gap: SPACING.lg,
  },
  summaryItem: {
    alignItems: 'center',
  },
  summaryNumber: {
    fontSize: FONT_SIZES.xl,
    fontWeight: 'bold' as const,
  },
  summaryLabel: {
    fontSize: FONT_SIZES.xs,
    color: COLORS.textSecondary,
  },
  listContainer: {
    padding: SPACING.md,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: SPACING.xl,
  },
  vulnerabilityCard: {
    backgroundColor: COLORS.cardBackground,
    borderRadius: BORDER_RADIUS.lg,
    padding: SPACING.md,
    marginBottom: SPACING.md,
    borderWidth: 1,
    borderColor: COLORS.cardBorder,
  },
  vulnerabilityHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  vulnerabilityTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  vulnerabilityTitle: {
    fontSize: FONT_SIZES.lg,
    fontWeight: 'bold' as const,
    color: COLORS.text,
    marginLeft: SPACING.sm,
    flex: 1,
  },
  vulnerabilitySeverity: {
    fontSize: FONT_SIZES.xs,
    fontWeight: 'bold' as const,
    textTransform: 'uppercase',
  },
  vulnerabilityCategory: {
    fontSize: FONT_SIZES.xs,
    color: COLORS.primary,
    fontWeight: '500' as const,
    textTransform: 'uppercase',
    marginBottom: SPACING.xs,
  },
  vulnerabilityDescription: {
    fontSize: FONT_SIZES.md,
    color: COLORS.textSecondary,
    lineHeight: 20,
    marginBottom: SPACING.md,
  },
  vulnerabilityDetails: {
    marginBottom: SPACING.md,
  },
  detailRow: {
    flexDirection: 'row',
    marginBottom: SPACING.xs,
  },
  detailLabel: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.textSecondary,
    width: 120,
  },
  detailValue: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.text,
    fontWeight: FONT_WEIGHTS.medium,
    flex: 1,
  },
  remediationContainer: {
    backgroundColor: COLORS.backgroundSecondary,
    borderRadius: BORDER_RADIUS.md,
    padding: SPACING.sm,
    marginBottom: SPACING.md,
  },
  remediationLabel: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.primary,
    fontWeight: FONT_WEIGHTS.bold,
    marginBottom: SPACING.xs,
  },
  remediationText: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.text,
    lineHeight: 18,
  },
  vulnerabilityActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  shareButtonContainer: {
    flex: 1,
    marginRight: SPACING.sm,
  },
  saveButton: {
    padding: SPACING.sm,
    borderRadius: BORDER_RADIUS.md,
    backgroundColor: COLORS.backgroundSecondary,
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  emptyStateTitle: {
    fontSize: FONT_SIZES.xl,
    fontWeight: 'bold' as const,
    color: COLORS.text,
    marginTop: SPACING.lg,
    marginBottom: SPACING.sm,
  },
  emptyStateDescription: {
    fontSize: FONT_SIZES.md,
    color: COLORS.textSecondary,
    textAlign: 'center',
    lineHeight: 20,
  },
});

export default VulnerabilityAnalysisScreen;
